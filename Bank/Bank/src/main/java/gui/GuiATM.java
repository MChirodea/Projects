/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import static javax.swing.JOptionPane.WARNING_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;

import java.awt.event.KeyEvent;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;
import java.util.LinkedHashSet;

import accounts.Account;
import accounts.SavingAccount;
import accounts.SpendingAccount;
import bankM.Bank;

/**
 *
 * @author mchir
 */
public class GuiATM extends javax.swing.JFrame {

	/**
	 * 
	 * */
	private Bank bank;
	private Object ac;
	private static final long serialVersionUID = -4469274930636937361L;

	/**
	 * 
	 */
	/**
	 * Creates new form GuiATM
	 */
	public GuiATM(Object aID) {
		this.ac = aID;
		FileInputStream fi;
		try {
			fi = new FileInputStream(new File("Bank.txt"));
			ObjectInputStream oi = new ObjectInputStream(fi);
			bank = (Bank) oi.readObject();
			fi.close();
			oi.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (EOFException e) {
			// TODO Auto-generated catch block
			bank = new Bank();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		initComponents();
		this.labelHelp();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		depositBTN = new javax.swing.JButton();
		skipDayBTN = new javax.swing.JButton();
		withdrawBTN = new javax.swing.JButton();
		progressBar = new javax.swing.JProgressBar();
		jTextField1 = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				formKeyPressed(evt);
			}
		});
		this.addWindowListener(new java.awt.event.WindowAdapter() {
			@Override
			public void windowClosing(java.awt.event.WindowEvent windowEvent) {
				FileOutputStream fo;
				try {
					fo = new FileOutputStream(new File("Bank.txt"));
					ObjectOutputStream oo = new ObjectOutputStream(fo);
					oo.writeObject(bank);
					fo.close();
					oo.close();

				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				// TODO add your handling code here:
			}
		});

		jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
		jLabel1.setText("ATM Simulator 2018(ESC to return)");
		jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				jTextField1KeyPressed(evt);
			}
		});
		depositBTN.setText("Deposit");
		depositBTN.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				jTextField1KeyPressed(evt);
			}
		});
		depositBTN.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				depositBTNActionPerformed(evt);
			}
		});

		withdrawBTN.setText("Withdraw");
		withdrawBTN.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				jTextField1KeyPressed(evt);
			}
		});
		withdrawBTN.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				withdrawBTNActionPerformed(evt);
			}
		});

		jTextField1.setText("           Introduce sum here! :D");

		jLabel2.setText("SUM:");

		jLabel3.setText("Remaining Funds:");

	    skipDayBTN.setText("Skip Month");
		skipDayBTN.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				jTextField1KeyPressed(evt);
			}
		});
        skipDayBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipDayBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(withdrawBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(skipDayBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(depositBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(withdrawBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skipDayBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(depositBTN, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
	}
	private void labelHelp(){
		Account temp = (Account) ac;
		if (temp.getAccType() == 1) {
			SavingAccount ac2 = (SavingAccount) temp;
			String x = "Remaining Funds: " + ac2.getSavings();
			jLabel3.setText(x);
		} else {
			SpendingAccount ac2 = (SpendingAccount) temp;
			String x = "Remaining Funds: " + ac2.getTotal();
			jLabel3.setText(x);
		}
	}
	private void formKeyPressed(java.awt.event.KeyEvent evt) {
		// TODO add your handling code here:
		if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
			try {
				for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
					if ("Nimbus".equals(info.getName())) {
						javax.swing.UIManager.setLookAndFeel(info.getClassName());
						break;
					}
				}
			} catch (ClassNotFoundException ex) {
				java.util.logging.Logger.getLogger(GuiAccounts.class.getName()).log(java.util.logging.Level.SEVERE,
						null, ex);
			} catch (InstantiationException ex) {
				java.util.logging.Logger.getLogger(GuiAccounts.class.getName()).log(java.util.logging.Level.SEVERE,
						null, ex);
			} catch (IllegalAccessException ex) {
				java.util.logging.Logger.getLogger(GuiAccounts.class.getName()).log(java.util.logging.Level.SEVERE,
						null, ex);
			} catch (javax.swing.UnsupportedLookAndFeelException ex) {
				java.util.logging.Logger.getLogger(GuiAccounts.class.getName()).log(java.util.logging.Level.SEVERE,
						null, ex);
			}
			FileOutputStream fo;
			try {
				fo = new FileOutputStream(new File("Bank.txt"));
				ObjectOutputStream oo = new ObjectOutputStream(fo);
				oo.writeObject(bank);
				fo.close();
				oo.close();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			this.dispose();
			java.awt.EventQueue.invokeLater(new Runnable() {
				public void run() {
					new GuiAccounts().setVisible(true);
				}
			});
		}
	}

	private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {
		// TODO add your handling code here:
		this.formKeyPressed(evt);
	}

	private void withdrawBTNActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		int sum = Integer.parseInt(jTextField1.getText());
		int c = 10;
		Account temp = (Account) ac;
		progressBar.setValue(c+5);
		c+=5;
		if (temp.getAccType() == 1) {
			SavingAccount ac2 = (SavingAccount) temp;
			if (sum - ac2.getSavings() == 0 && ac2.getlimit() == true) {
				if(ac2.getlimitDeposit() == false){
				ac2.setLimit(false);
				ac2.setSavings(0);
				progressBar.setValue(c+10);
				c+= 10;
				bank.writeAcc(ac2.getHolder(), ac2);
				c+=5;
				progressBar.setValue(c);
				}
				else{
					showMessageDialog(null,
							"Cannot withdraw without a deposit!",
							"WARNING", WARNING_MESSAGE);
					return;
				}
			} else {
				showMessageDialog(null,
						"This is a saving account, only the whole sum can be taken, only once!",
						"WARNING", WARNING_MESSAGE);
				return;
			}

		} else {
			progressBar.setValue(c+5);
			c+= 5;
			SpendingAccount ac2 = (SpendingAccount) temp;
			if (ac2.getTotal() - sum >= 0) {
				ac2.setTotal(ac2.getTotal()-sum);
				c+=10;
				progressBar.setValue(c);
				bank.writeAcc(ac2.getHolder(), ac2);
				progressBar.setValue(c+5);
				c+=5;
			} else {
				showMessageDialog(null,
						"Not enough funds!",
						"WARNING", WARNING_MESSAGE);
				return;
			}
		}
		c+=40;
		progressBar.setValue(c);
		LinkedHashSet<Object> tempAc = bank.readAcc(temp.getHolder());
		Iterator<Object> ito = tempAc.iterator();
		while(ito.hasNext()){
			Account tempo = (Account) ito.next();
			if(tempo.getID() == temp.getID()){
				ac = tempo;
				this.labelHelp();
				progressBar.setValue(100);
				return;
			}
		}
	}

	
	 private void skipDayBTNActionPerformed(java.awt.event.ActionEvent evt) {                                           
	        // TODO add your handling code here:
		 	Account temp = (Account) ac;
			if (temp.getAccType() == 1) {
				SavingAccount ac2 = (SavingAccount) temp;
				if (ac2.getlimit() == true) {
					int sum =(int) ((float) ac2.getSavings()+((float)ac2.getInterest() / 100.0) * (float)ac2.getSavings());
					ac2.setSavings(sum);
					bank.writeAcc(ac2.getHolder(), ac2);
				} 

			}
			LinkedHashSet<Object> tempAc = bank.readAcc(temp.getHolder());
			Iterator<Object> ito = tempAc.iterator();
			while(ito.hasNext()){
				Account tempo = (Account) ito.next();
				if(tempo.getID() == temp.getID()){
					ac = tempo;
					this.labelHelp();
					return;
				}
			}
	    }   
	private void depositBTNActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		int sum = Integer.parseInt(jTextField1.getText());
		Account temp = (Account) ac;
		if (temp.getAccType() == 1) {
			SavingAccount ac2 = (SavingAccount) temp;
			if (ac2.getlimitDeposit() == true) {
				ac2.setLimitDeposit(false);
				ac2.setSavings(sum);
				bank.writeAcc(ac2.getHolder(), ac2);
			} else {
				showMessageDialog(null,
						"This is a saving account, only the whole sum can be deposited and only once!",
						"WARNING", WARNING_MESSAGE);
				return;
			}

		} else {
			SpendingAccount ac2 = (SpendingAccount) temp;
			ac2.setTotal(ac2.getTotal()+sum);
			bank.writeAcc(ac2.getHolder(), ac2);
			
		}
		LinkedHashSet<Object> tempAc = bank.readAcc(temp.getHolder());
		Iterator<Object> ito = tempAc.iterator();
		while(ito.hasNext()){
			Account tempo = (Account) ito.next();
			if(tempo.getID() == temp.getID()){
				ac = tempo;
				this.labelHelp();
				return;
			}
		}
	}


	private javax.swing.JButton depositBTN;
	private javax.swing.JButton skipDayBTN;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JButton withdrawBTN;

}
